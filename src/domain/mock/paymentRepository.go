// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/unq-arq2-ecommerce-team/order-orchestrator/src/domain/model"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// MakePayment mocks base method.
func (m *MockPaymentRepository) MakePayment(ctx context.Context, payment *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePayment indicates an expected call of MakePayment.
func (mr *MockPaymentRepositoryMockRecorder) MakePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePayment", reflect.TypeOf((*MockPaymentRepository)(nil).MakePayment), ctx, payment)
}
